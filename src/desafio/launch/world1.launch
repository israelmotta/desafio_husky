<?xml version="1.0"?>
<launch>

	<arg name="laser_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>

	<!-- <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find desafio)/model"/>
  	<env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find desafio)/model"/> -->


  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  
  <arg name="urdf_extras"         default="$(find desafio)/urdf/teste.xacro"/>
  
  <include file="$(find bir_cimatec4_map)/launch/gazebo.launch">
    <!-- <arg name="world_name" value="$(arg world_name)"/>  -->
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
    <arg name="verbose" value= "false"/>
  </include>

  <include file="$(find husky_gazebo)/launch/spawn_husky.launch">
      <arg name="laser_enabled" value="$(arg laser_enabled)"/>
      <arg name="kinect_enabled" value="$(arg kinect_enabled)"/>
      <arg name="urdf_extras" value="$(arg urdf_extras)"/>

  </include>

  <node pkg="gazebo_light_sensor_plugin" name="opencv_camera" type="vision.py" output="screen" />
  <node pkg="gazebo_light_sensor_plugin" name="robot_vision" type="controlvision.py" output="screen" />


  <!-- <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="/velodyne_points"/>
        <rosparam>
            target_frame: velodyne # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: -0.4 -->
            <!-- max_height: 1.0 -->
            <!-- angle_min: -1.5708 # -M_PI/2
            angle_max: 1.5708 # M_PI/2
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 50.0
            use_inf: true
            inf_epsilon: 1.0 -->
            <!-- # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 0
        </rosparam>
    </node> -->

  <!-- Show in Rviz   -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find desafio)/launch/husky.rviz"/> -->




  <!--- Run gmapping -->
  <!-- <include file="$(find husky_navigation)/launch/gmapping.launch" /> -->
  <!--- Run Move Base -->
  <!-- <include file="$(find husky_navigation)/launch/move_base.launch" /> -->



	<!-- <rosparam file="$(find nav2d_tutorials)/param/ros.yaml"/> -->


  <!-- <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping"> -->
    <!-- <rosparam file="$(find challenge_husky)/param/mapper.yaml"/> -->
    <!-- <rosparam>
      odom_frame: odom
      base_frame: base_link
      map_frame: map
      map_update_interval: 0.5 # Publish new map
      maxUrange: 110 # Should be just less than sensor range
      maxRange: 140 # Should be just greater than sensor range
      particles: 100 # Increased from 80
      # Update frequencies
      linearUpdate: 0.3
      angularUpdate: 0.5
      temporalUpdate: 2.0
      resampleThreshold: 0.5
      # Initial Map Size
      xmin: -100.0
      ymin: -100.0
      xmax: 100.0
      ymax: 100.0
      delta: 0.05
      # All default
      sigma: 0.05
      kernelSize: 1
      lstep: 0.05
      astep: 0.05
      iterations: 5
      lsigma: 0.075
      ogain: 3.0
      lskip: 0
      llsamplerange: 0.01
      llsamplestep: 0.01
      lasamplerange: 0.005
      lasamplestep: 0.005
    </rosparam>
  </node> -->

  	<!-- Start the Operator to control the simulated robot -->
	<!-- <node name="Operator" pkg="nav2d_operator" type="operator" >
		<remap from="scan" to="base_scan"/>
		<rosparam file="$(find nav2d_tutorials)/param/operator.yaml"/>
		<rosparam file="$(find nav2d_tutorials)/param/costmap.yaml" ns="local_map" />
	</node> -->


	<!-- Start the Navigator to move the robot autonomously -->
	<!-- <node name="Navigator" pkg="nav2d_navigator" type="navigator">
		<rosparam file="$(find nav2d_tutorials)/param/navigator.yaml"/>
	</node>

	<node name="GetMap" pkg="nav2d_navigator" type="get_map_client" />
	<node name="Explore" pkg="nav2d_navigator" type="explore_client" />
	<node name="SetGoal" pkg="nav2d_navigator" type="set_goal_client" /> -->

</launch>
